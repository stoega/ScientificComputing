#pragma once

#include <iostream>
#include <complex>
#include "SCmatrix.h"
#include "SCTridiagSparseMatrix.h"
#include "SCSparseMatrix.h"

namespace SC
{
    template <typename T = double>
    class TridiagLUSolver : public LinearOperator<T>
    {
    private:
        const TridiagSparseMatrix<T> &matrix;
        Vector<T> L; // Store only the subdiagonal elements
        Vector<T> D; // Store diagonal elements of U
        Vector<T> U; // Store superdiagonal elements

    public:
        TridiagLUSolver(const TridiagSparseMatrix<T> &mat)
            : LinearOperator<T>(mat.Height(), mat.Width()),
              matrix(mat),
              L(mat.Height() - 1),
              D(mat.Height()),
              U(mat.Height() - 1)
        {
            Factorize();
        }

        // Copy constructor and assignment operator deleted
        TridiagLUSolver(const TridiagLUSolver &other) = delete;
        TridiagLUSolver &operator=(const TridiagLUSolver &other) = delete;

        ~TridiagLUSolver() = default;

        void Factorize()
        {
            int n = matrix.Height();

            // First row
            D(0) = matrix.Get(0, 0);
            U(0) = matrix.Get(0, 1);

            // Middle rows
            for (int i = 1; i < n - 1; ++i)
            {
                L(i - 1) = matrix.Get(i, i - 1) / D(i - 1);
                D(i) = matrix.Get(i, i) - L(i - 1) * U(i - 1);
                U(i) = matrix.Get(i, i + 1);
            }

            // Last row
            if (n > 1)
            {
                L(n - 2) = matrix.Get(n - 1, n - 2) / D(n - 2);
                D(n - 1) = matrix.Get(n - 1, n - 1) - L(n - 2) * U(n - 2);
            }

            // for (int j = 0; j < n; j++)
            // {
            //     for (int i = 0; i <= j; i++)
            //     {
            //         U(i) = matrix.Get(i, j);
            //         for (int k = 0; k < i; k++)
            //         {
            //             U(i) -= L(i, k) * U(k, j)
            //         }
            //     }
            //     for (int i = j + 1; i <= n; i++)
            //     {
            //         L(i) = matrix.Get(i, j) / U(j);
            //         for (int k = 0; k < j; k++)
            //         {
            //             L(i, j) -= L(i, k) * U(k, j) / U(j, j);
            //         }
            //     }
            // }
        }

        void Apply(const Vector<T> &x, Vector<T> &r, T factor = 1.) const override
        {
            int n = matrix.Height();
            r.SetSize(n);
            Vector<T> y(n); // Temporary vector for forward substitution

            // Forward substitution (Ly = x)
            y(0) = x(0);
            for (int i = 1; i < n; ++i)
            {
                y(i) = x(i) - L(i - 1) * y(i - 1);
            }

            // Backward substitution (Ur = y)
            r(n - 1) = y(n - 1) / D(n - 1);
            for (int i = n - 2; i >= 0; --i)
            {
                r(i) = (y(i) - U(i) * r(i + 1)) / D(i);
            }

            // Apply scaling factor
            if (factor != T(1))
            {
                r *= factor;
            }
        }
    };
}
